NODE_ENV=development
DEBUG=src:components:app, src:client-requests
DEMO_MODE=true
DEMO_USER=guest@timelockr-demo.com
DEMO_PASSWORD=password
# API_HOST=http://127.0.0.1:5000
# SERVER_CONSOLE_URL=//127.0.0.1:3000
API_HOST=http://timelockr-server.herokuapp.com
SERVER_CONSOLE_URL=//timelockr-server.herokuapp.com
PUBLIC_URL=//127.0.0.1:8080

#########################################################################
# API_HOST=http://timelockr-server.herokuapp.com
# SERVER_CONSOLE_URL=//timelockr-server.herokuapp.com
#########################################################################
# CURRENT SETUP:                                                ðŸš© ðŸš© ðŸš©
#     â€¢ webpack-env is a dev-dependency
#     â€¢ development environment variables are stored in .env, which is
#       included in the .gitignore not committed
#     â€¢ production environment variables are:
#        - specified in the build specification YML ('amplify.yml') on AWS;
#        - stored in a .env file on the host by including a prebuild
#        - script ('printenv >> .env') in the build spec
#        - dotenv-webpack then loads those vars into the production build
# This means that:
#  - All environmental variables referenced in the app also
#    need to be defined separately by the host plateform.
#  - Debug statements will be ignored in production, on the
#    host platform.
#  - There is no need to toggle any of the env variables
#    herein. No .env file on the platform means changes to
#    their values has no effect on production mode.
#
# For more information, read section below about referencing
# the .env file.
#
#########################################################################
#   DEBUG=*,-not_this || *,-express* || express:*
#   DEBUG=connect:bodyParser,
#      connect:compress,
#      connect:session
#   is equivalent to:
#      DEBUG=connect:*
#
#########################################################################
#  Be sure config removes sourcemaps from production            ðŸš© ðŸš© ðŸš©
#  bundles.
#
#  All authentication creds should be set using host
#  provided environment variables (set via their cli
#  or online UI)
#
#########################################################################
# REFERENCING THE .env FILE
#   Leave sensitive information out of .env file. Use it only
#   for local values, and define host-specific authentication
#   values using the host API. (I may be wrong on this point)
#
# Note from dotenv devs:
#  - The .env file "should only include environment-specific
#    values such as database passwords or API keys."
#
#  - Hosted environment variables override those specified
#    in the .env file. "if there is a variable in your .env
#    file which collides with one that already exists in
#    your environment, then that variable will be skipped"
#
# Webpack:
#   If all env vars separately defined on host platform:
#     $ npm install dotenv-webpack --save-dev
#   If only some env variables will be:
#     $ npm install dotenv-webpack
#
#   webpack.config.json:
#     const Dotenv = require('dotenv-webpack');
#     // Do not reference anywhere else.
#     // Omit Webpack.DefinePlugin and dotenv.
#     // Dotenv-webpack wraps both.
#
# create-react-app:
#   If all env vars separately defined on host platform:
#     $ npm install dotenv --save-dev
#   If only some env variables will be:
#     $ npm install dotenv
#
#   package.json:
#     "start": "node -r dotenv/config app.ts"
#     // -r flag preloads environment variables in a file
#     // called config.ts, which avoids the need to dotenv
#     // package anywhere in the app itself.
#
# NOTE: Committing .env files is bad practice, so really
#       you should just install dotenv as a dev dependency.
#
#########################################################################
# config.js:
#   Benefits:
#     - Compartmentalizes variables in a module
#     - Can write "myEnvVariable" instead of
#       "process.env.myEnvVariable"
#     - Clarifies how all environment vars are being mapped
#     - Can add other config properties from non-environment
#       variables (i.e., global but not sensitive)
#
#   Note:
#     Remove config.ts from .gitignore if the file is pre-
#     loaded with environment vars from a separate .env file.
#
#########################################################################
# .env.example:
#   Include this file if working on a team.  It shows other
#   devs what environment variables they need to define in
#   order to run the app.
#
#########################################################################
# re Source Maps:
#   Specify "GENERATE_SOURCEMAP=false" in .env file to
#   omit source maps from production builds. For webpack,
#   sourcemaps are handeld by configuraing the "devTools"
#   and "optimization" variables in the webpack config
#   file.
#
# re Security
#   Do not include host platform authentication or
#   credentials in the .env file because dotenv-webpack
#   will hardcode it into the bundle. This is why the
#   platforms let you Specify environment variables.
#   Sensitive vars that can be abused if stolen need
#   to be enabled via host API environment vars.
#
#########################################################################
# re Backend
#   Heroku assigns environment variable "DATABASE_URL",
#   which parses out to all of the following environment
#   variables.  Which is to say all the values in this
#   file, and all the values in the db config are taken
#   care of by the 'connectionstring' code.
#       PGUSER
#       PGPASSWORD
#       PGHOST
#       PGPORT
#       PGDATABASE
#
#########################################################################

# https://medium.com/the-node-js-collection/making-your-node-js-work-everywhere-with-environment-variables-2da8cdf6e786
